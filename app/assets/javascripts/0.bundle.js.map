{"version":3,"sources":["webpack:///./frontend/components/profile/profile.jsx","webpack:///./frontend/components/profile/profile_container.js"],"names":["Profile","props","state","posts","profilePhoto","renderPost","bind","fetchUser","match","params","id","fetchAllPosts","Object","values","reverse","map","post","idx","undefined","user_id","user","photoUrl","username","postIds","length","bio","React","Component","withRouter","mapStateToProps","ownProps","entities","users","mapDispatchToProps","dispatch","connect"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;CAEA;;AACA;;IAEMA,O;;;;;AACJ,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,2MAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,WAAK,EAAE,EADI;AAEXC,kBAAY,EAAE;AAFH,KAAb;AAIA,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,4FAAlB,CANiB,CAOjB;AACA;AACA;;AATiB;AAUlB;;;;wCAEmB;AAClB,WAAKL,KAAL,CAAWM,SAAX,CAAqB,KAAKN,KAAL,CAAWO,KAAX,CAAiBC,MAAjB,CAAwBC,EAA7C;AACA,WAAKT,KAAL,CAAWU,aAAX;AACD;;;iCAEY;AAAA;;AACX,aACEC,MAAM,CAACC,MAAP,CAAc,KAAKZ,KAAL,CAAWE,KAAzB,EAAgCW,OAAhC,GAA0CC,GAA1C,CAA8C,UAACC,IAAD,EAAOC,GAAP,EAAe;AAC3D,YAAID,IAAI,KAAKE,SAAb,EACE;;AACF,YAAIF,IAAI,CAACG,OAAL,KAAiB,MAAI,CAAClB,KAAL,CAAWmB,IAAX,CAAgBV,EAArC,EAAyC;AACvC,iBAAO;AAAK,qBAAS,EAAC;AAAf,aACP;AAAK,eAAG,EAAEO,GAAV;AAAe,eAAG,EAAED,IAAI,CAACK;AAAzB,YADO,CAAP;AAID,SALD,MAKO;AACL,iBAAO,EAAP;AACD;AACF,OAXD,CADF;AAcD,K,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;6BAES;AAAA,UACDD,IADC,GACQ,KAAKnB,KADb,CACDmB,IADC;AAEP,UAAIA,IAAJ,EAAU,OACR,wHACE,2DAAC,kEAAD,OADF,EAEE;AAAS,iBAAS,EAAC;AAAnB,SACE;AAAK,iBAAS,EAAC,SAAf;AAAyB,WAAG,EAAE,KAAKnB,KAAL,CAAWmB,IAAX,CAAgBhB;AAA9C,QADF,EAQE;AAAK,iBAAS,EAAC;AAAf,SACE;AAAI,iBAAS,EAAC;AAAd,SAA8BgB,IAAI,CAACE,QAAnC,CADF,EAEE,sEAAG,2EAASF,IAAI,CAACG,OAAL,CAAaC,MAAtB,CAAH,WAFF,EAGE,sEAAIJ,IAAI,CAACK,GAAT,CAHF,CARF,CAFF,EAiBE;AAAK,iBAAS,EAAC;AAAf,SACE;AAAK,iBAAS,EAAC;AAAf,SACE;AAAK,iBAAS,EAAC;AAAf,SACE,8EADF,CADF,CADF,EAOI;AAAK,iBAAS,EAAC;AAAf,SACG,KAAKpB,UAAL,EADH,CAPJ,CAjBF,EAkCE,2DAAC,sEAAD,OAlCF,EAmCE;AAAK,iBAAS,EAAC;AAAf,SAEE;AAAG,YAAI,EAAC;AAAR,kBAFF,EAGE;AAAG,YAAI,EAAC;AAAR,oBAHF,EAIE,yFAJF,CAnCF,CADQ;AA4CX;;;;EAhImBqB,4CAAK,CAACC,S;;AAkIbC,kIAAU,CAAC5B,OAAD,CAAzB,E;;;;;;;;;;;;ACxIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;AAEA,IAAM6B,eAAe,GAAG,SAAlBA,eAAkB,CAAC3B,KAAD,EAAQ4B,QAAR,EAAqB;AAC3C,MAAIV,IAAI,GAAGlB,KAAK,CAAC6B,QAAN,CAAeC,KAAf,CAAqBF,QAAQ,CAACtB,KAAT,CAAeC,MAAf,CAAsBC,EAA3C,CAAX;AACA,MAAIP,KAAK,GAAGD,KAAK,CAAC6B,QAAN,CAAe5B,KAA3B,CAF2C,CAG3C;;AACA,MAAIiB,IAAJ,EAAU;AACRjB,SAAK,GAAGiB,IAAI,CAACG,OAAL,CAAaR,GAAb,CACN,UAAAL,EAAE;AAAA,aAAIR,KAAK,CAAC6B,QAAN,CAAe5B,KAAf,CAAqBO,EAArB,CAAJ;AAAA,KADI,CAAR;AAGD,GAJD,MAIO;AACLP,SAAK,GAAG,EAAR;AACD;;AACD,SAAQ;AACNiB,QAAI,EAAJA,IADM;AAENjB,SAAK,EAALA;AAFM,GAAR;AAID,CAfD;;AAiBA,IAAM8B,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ;AAAA,SAAK;AACtC3B,aAAS,EAAE,mBAAAG,EAAE;AAAA,aAAIwB,QAAQ,CAAC3B,uEAAS,CAACG,EAAD,CAAV,CAAZ;AAAA,KADyB;AAEtCC,iBAAa,EAAE;AAAA,aAAMuB,QAAQ,CAACvB,2EAAa,EAAd,CAAd;AAAA;AAFuB,GAAL;AAAA,CAAnC;;AAKewB,0HAAO,CAACN,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CjC,gDAA7C,CAAf,E","file":"0.bundle.js","sourcesContent":["import React from 'react';\nimport NavBarContainer from '../nav_bar/nav_bar_container';\nimport { withRouter } from 'react-router-dom';\n// import ProfilePostItem from './profile_post_item';\nimport PostForm from '../post_form/post_form_container'\n\nclass Profile extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: {},\n      profilePhoto: null\n    };\n    this.renderPost = this.renderPost.bind(this);\n    // this.updateProPic = this.updateProPic.bind(this);\n    // this.handleSubmit = this.handleSubmit.bind(this);\n    // this.fileHandler = this.fileHandler.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.fetchUser(this.props.match.params.id);\n    this.props.fetchAllPosts();\n  }\n\n  renderPost() {\n    return (\n      Object.values(this.props.posts).reverse().map((post, idx) => {\n        if (post === undefined)\n          return;\n        if (post.user_id === this.props.user.id) {\n          return <div className=\"profile-post-item\">\n          <img key={idx} src={post.photoUrl} />\n           {/* <li key={idx}>{post.caption}</li>; */}\n          </div>\n        } else {\n          return \"\"\n        }\n      })\n    )\n  }\n  // fileHandler(event) {\n  //   const file = event.target.files[0];\n  //   const fileReader = new FileReader();\n  //   fileReader.onloadend = () => {\n  //     this.setState({ photo: file, preview: fileReader.result });\n  //   };\n  //   if (file) {\n  //     fileReader.readAsDataURL(file);\n  //   }\n  // }\n  // handleSubmit(event) {\n  //   event.preventDefault();\n    \n  //   let button = event.target;\n  //   let parent = button.parentElement;\n  //   let loader = document.createElement('p');\n  //   loader.innerText = 'posting';\n  //   loader.classList.add('dummy-submit-button');\n  //   parent.removeChild(button);\n  //   parent.appendChild(loader);\n\n  //   const formData = new FormData();\n  //   // const filledForm = append(formData, { 'post[location]': this.state.location} );\n  //   formData.append('user[profilePhoto]', this.state.profilePhoto);\n    \n  //   this.props.action(formData)\n  //     .then(() => {\n  //       this.setState({\n  //         profilePhoto: null,\n  //         preview: null\n  //       });\n  //       document.getElementById('postform').className = 'hide';\n  //     });\n  // }\n  // fileUploadHandler() {\n  //   this.handleSubmit()\n  // }\n\n\n  // updateProPic() {\n  //   return <label onClick={this.fileUploadHandler}>\n  //           <p>Upload</p>\n  //           <input type=\"file\"\n  //             accept=\"image/*\"\n  //             onChange={this.fileHandler} />\n  //         </label>\n  // }\n\n  render() {\n    let { user } = this.props;\n    if (user) return (\n      <>\n        <NavBarContainer />\n        <section className=\"profile-header\">\n          <img className=\"pro-pic\" src={this.props.user.profilePhoto} />\n          {/* <label>\n            <p>Upload</p>\n            <input type=\"file\"\n              accept=\"image/*\"\n              onChange={this.fileHandler} />\n          </label> */}\n          <div className=\"pro-user-info\">\n            <h2 className=\"pro-username\">{user.username}</h2>\n            <p><strong>{user.postIds.length}</strong> posts</p>\n            <p>{user.bio}</p>\n          </div>\n        </section>\n\n        <div className=\"profile-posts\">\n          <div className=\"profile-menu\">\n            <div className=\"posts\">\n              <p>POSTS</p>\n\n            </div>\n          </div>\n            <div className=\"posts-grid\">\n              {this.renderPost()}\n              {/* {this.props.posts.map((post, idx) => {\n              <ProfilePostItem\n                key={idx}\n                post={post} />;\n            })}  */}\n            </div>\n          \n        </div>\n        <PostForm />\n        <div className=\"footer\">\n          {/* <a href=\"https://stanbond.dev\">ABOUT ME</a> */}\n          <a href=\"https://github.com/stanbond\">GITHUB</a>\n          <a href=\"https://www.linkedin.com/in/stanbondarenko/\">LINKEDIN</a>\n          <p>2019 PICTURESQUE</p>\n        </div>\n      </>\n    );\n  }\n}\nexport default withRouter(Profile);","import { connect } from 'react-redux';\nimport { fetchUser } from '../../actions/user_actions';\nimport Profile from './profile';\nimport { fetchAllPosts } from '../../actions/post_actions';\n\nconst mapStateToProps = (state, ownProps) => {\n  let user = state.entities.users[ownProps.match.params.id];\n  let posts = state.entities.posts;\n  // console.log(state);\n  if (user) {\n    posts = user.postIds.map(\n      id => state.entities.posts[id]\n    );\n  } else {\n    posts = [];\n  }\n  return ({\n    user,\n    posts\n  });\n};\n\nconst mapDispatchToProps = dispatch => ({\n  fetchUser: id => dispatch(fetchUser(id)),\n  fetchAllPosts: () => dispatch(fetchAllPosts())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);"],"sourceRoot":""}